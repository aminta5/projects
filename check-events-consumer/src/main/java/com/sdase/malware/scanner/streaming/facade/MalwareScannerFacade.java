package com.sdase.malware.scanner.streaming.facade;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sdase.malware.scanner.streaming.model.CheckEvent;
import lombok.extern.slf4j.Slf4j;
import nl.garvelink.iban.Modulo97;
import org.apache.commons.lang3.StringUtils;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.text.PDFTextStripper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.RecoverableDataAccessException;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Component;
import java.io.File;
import java.io.IOException;
import java.util.stream.Stream;

@Component
@Slf4j
public class MalwareScannerFacade {

    @Autowired
    ObjectMapper objectMapper;

    @Autowired
    KafkaTemplate<String,String> kafkaTemplate;

    public void processCheckEvent(ConsumerRecord<String,String> consumerRecord) throws IOException {

        CheckEvent checkEvent = objectMapper.readValue(consumerRecord.value(), CheckEvent.class);

        if(checkEvent.getUrl() == null){
            throw  new RecoverableDataAccessException("Temporary Network Issue");
        }
        var file = new File(checkEvent.getUrl());

        try(PDDocument document = PDDocument.load(file);){
            if(!checkPdfPage(document)){
                throw new RuntimeException("Invalid Iban number");
            }
            else{
                log.info("IBAN number is valid");
            }
        }

    }

    private boolean checkPdfPage(PDDocument doc) throws IOException {
        PDFTextStripper stripper = new PDFTextStripper();
        String text = stripper.getText(doc);
        String iban = Stream.of(text.split("\\r?\\n")).filter(l -> l.contains("IBAN"))
                .map(s -> StringUtils.substringBetween(s, "IBAN:", "SWIFT/BIC"))
                .map(s -> s.replaceAll("\\s",""))
                .findFirst().get();
        return Modulo97.verifyCheckDigits(iban);

    }
}
